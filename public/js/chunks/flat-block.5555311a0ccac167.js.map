{"version":3,"file":"js/chunks/flat-block.5555311a0ccac167.js","mappings":"+JAMMA,EAAsB,IAAIC,EAAAA,EAI1BC,EAAY,SAACC,EAAqBC,GACpC,GAAID,IAAWA,EAAOE,UAAUC,SAAS,aAAc,CACnD,IAAMC,EAAYJ,EAAOK,QAAa,IAEtCR,EAASS,UAAU,aAAa,SAACC,GACzBA,EAAQF,QAAa,MAAMD,GAI/BH,EAAUO,MACd,G,MAEAP,EAAUO,MAElB,EAgCA,UA9B6B,SAACC,GAC1BA,EAAkBC,SAAQ,SAACC,GACvB,IAAMX,EAASW,EAAOC,QAAQ,yBACxBX,EAAwB,IAAIY,EAAAA,EAAcF,GAEhD,GAAKX,EAIL,GAAI,yBAA0Bc,OAAQ,CAClC,IAAMC,EAAgB,IAAIC,sBAAqB,SAACC,GAC5CA,EAAQP,SAAQ,SAACQ,GACTA,EAAMC,gBACNpB,EAAUC,EAAQC,EAE1B,GACJ,IAEImB,EAAAA,EAAAA,aAAmBT,EACnBG,OAAOO,aAAeC,SAASC,gBAAgBC,cAC/CzB,EAAUC,EAAQC,GAElBc,EAAcU,QAAQd,E,MAG1BZ,EAAUC,EAAQC,EAE1B,GACJ,C,wvBCrD6C,IAEvCY,EAAa,WAGf,SAAAA,EAAYN,G,uGAAoBmB,CAAA,KAAAb,G,EAAA,K,OAAA,G,MAAA,c,wFAC5Bc,KAAKpB,QAAUA,CACnB,C,UA8BC,O,EA9BAM,G,EAAA,EAAAe,IAAA,OAAAC,MAEM,WAECf,OAAOgB,UACPH,KAAKI,QAELX,EAAAA,EAAAA,WAAiB,yEAA0EO,KAAKI,MAAMC,KAAKL,MAEnH,GAEA,CAAAC,IAAA,QAAAC,MACQ,WACJ,IAAMI,EAAmBN,KAAKpB,QAAQF,QAAmB,UACnD6B,EAAWP,KAAKpB,QAAQ4B,GAE9B,IAAKF,EACD,MAAM,IAAIG,MAAM,IAADC,OAAKH,EAAQ,iEAGhC,IAAMI,EAAaC,KAAKC,MAAMC,KAAKR,IAEnCnB,OAAOgB,UAAUtB,KAAK,CAClBkC,GAAiBR,EACjBS,IAAiBL,EAAWK,IAC5BC,aAAiBN,EAAWM,aAC5BC,eAAiBP,EAAWO,eAC5BC,UAAiBR,EAAWQ,UAC5BC,gBAAiBT,EAAWS,iBAEpC,M,8EAAClC,CAAA,CAnCc,GAsCnB,K","sources":["webpack://multi-kelnik-2.0/./frontend/src/components/flat/index.ts","webpack://multi-kelnik-2.0/./frontend/src/components/planoplan/index.ts"],"sourcesContent":["import InitPlanoplan from '@/components/planoplan';\r\nimport type {IObserver} from '@/common/scripts/types/observer';\r\nimport type {IPlanoplan} from '../planoplan/types';\r\nimport Observer from '@/common/scripts/observer';\r\nimport {Utils} from '@/common/scripts/utils';\r\n\r\nconst observer: IObserver = new Observer();\r\n\r\n// Проверяем - находится ли планоплан в Табе и активен ли таб.\r\n// Если Планоплан не в табе, то сразу стартуем его при вызове этой функции.\r\nconst checkTabs = (parent: HTMLElement, planoplan: IPlanoplan): void => {\r\n    if (parent && !parent.classList.contains('is-active')) {\r\n        const parentTab = parent.dataset['tab'];\r\n\r\n        observer.subscribe('tabChange', (element: HTMLElement): void => {\r\n            if (element.dataset['tab'] !== parentTab) {\r\n                return;\r\n            }\r\n\r\n            planoplan.init();\r\n        });\r\n    } else {\r\n        planoplan.init();\r\n    }\r\n};\r\n\r\nconst initPlanoplanWidgets = (planoplanElements: HTMLElement[]): void => {\r\n    planoplanElements.forEach((widget: HTMLElement) => {\r\n        const parent = widget.closest('.j-tabs-content__item') as HTMLElement;\r\n        const planoplan: IPlanoplan = new InitPlanoplan(widget);\r\n\r\n        if (!parent) {\r\n            return;\r\n        }\r\n\r\n        if ('IntersectionObserver' in window) {\r\n            const widgetObserve = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\r\n                entries.forEach((entry: IntersectionObserverEntry) => {\r\n                    if (entry.isIntersecting) {\r\n                        checkTabs(parent, planoplan);\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (Utils.isInViewport(widget,\r\n                window.innerHeight || document.documentElement.clientHeight)) {\r\n                checkTabs(parent, planoplan);\r\n            } else {\r\n                widgetObserve.observe(widget);\r\n            }\r\n        } else {\r\n            checkTabs(parent, planoplan);\r\n        }\r\n    });\r\n};\r\n\r\nexport default initPlanoplanWidgets;\r\n","import type {IPlanoplan} from './types';\r\nimport {Utils} from '@/common/scripts/utils';\r\n\r\nclass InitPlanoplan implements IPlanoplan {\r\n    private element: HTMLElement;\r\n\r\n    constructor(element: HTMLElement) {\r\n        this.element = element;\r\n    }\r\n\r\n    public init(): void {\r\n        // Если скрипт планоплана уже есть на странице, то запускаем загрузку виджета, если нет, подгружаем скрипт\r\n        if (window.Planoplan) {\r\n            this._load();\r\n        } else {\r\n            Utils.loadScript('https://widget.planoplan.com/etc/multiwidget/release/static/js/main.js', this._load.bind(this));\r\n        }\r\n    }\r\n\r\n    // Загружаем виджет планоплана\r\n    private _load(): void {\r\n        const widgetDataEncode = this.element.dataset['planoplan'];\r\n        const widgetId = this.element.id;\r\n\r\n        if (!widgetDataEncode) {\r\n            throw new Error(`#${widgetId} должен содержать атрибут 'data-planoplan' с данными виджета`);\r\n        }\r\n\r\n        const widgetData = JSON.parse(atob(widgetDataEncode));\r\n\r\n        window.Planoplan.init({\r\n            el             : widgetId,\r\n            uid            : widgetData.uid,\r\n            primaryColor   : widgetData.primaryColor,\r\n            secondaryColor : widgetData.secondaryColor,\r\n            textColor      : widgetData.textColor,\r\n            backgroundColor: widgetData.backgroundColor\r\n        });\r\n    }\r\n}\r\n\r\nexport default InitPlanoplan;\r\n"],"names":["observer","Observer","checkTabs","parent","planoplan","classList","contains","parentTab","dataset","subscribe","element","init","planoplanElements","forEach","widget","closest","InitPlanoplan","window","widgetObserve","IntersectionObserver","entries","entry","isIntersecting","Utils","innerHeight","document","documentElement","clientHeight","observe","_classCallCheck","this","key","value","Planoplan","_load","bind","widgetDataEncode","widgetId","id","Error","concat","widgetData","JSON","parse","atob","el","uid","primaryColor","secondaryColor","textColor","backgroundColor"],"sourceRoot":""}