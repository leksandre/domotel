{"version":3,"file":"js/chunks/tabs.b3b2407f110fa5bc.js","mappings":"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","sources":["webpack://multi-kelnik-2.0/./frontend/src/components/tabs/index.ts"],"sourcesContent":["import type {ITabData, ITabs, ITabsOptions} from './types';\r\nimport type {IObserver} from '@/common/scripts/types/observer';\r\nimport Observer from '@/common/scripts/observer';\r\n\r\nconst observer: IObserver = new Observer();\r\nconst CLASS_ACTIVE = 'is-active';\r\n\r\nclass Tabs implements ITabs {\r\n    /**\r\n     * Обертка табов\r\n     * нужна на случай множественных табов на странице\r\n     * по дефолту - document\r\n     * @type {HTMLElement | null}\r\n     */\r\n    private elem: HTMLElement | Document;\r\n\r\n    /**\r\n     * Надо ли открывать таб по хэшу\r\n     * @type {boolean}\r\n     */\r\n    private hash: boolean = false;\r\n\r\n    /**\r\n     * Идентификатор таба, который нужно показать первым\r\n     * если нет хэша, первым будет показан этот таб\r\n     * если его нет, будет показан первый таб или таб с активным классом\r\n     * @type {string | null}\r\n     */\r\n    private initialTab: string | null;\r\n\r\n    /**\r\n     * Родительская нода табов\r\n     * @type {Element | null}\r\n     */\r\n    private tabsParent: Element | null;\r\n\r\n    /**\r\n     * Массив табов\r\n     * @type {Array}\r\n     */\r\n    private tabs: HTMLElement[];\r\n\r\n    /**\r\n     * Родительская нода контента\r\n     * @type {Node}\r\n     */\r\n    private contentsParent: Element | null;\r\n\r\n    /**\r\n     * Массив блоков контента\r\n     * @type {HTMLElement[]}\r\n     */\r\n    private contents: HTMLElement[];\r\n\r\n    /**\r\n     * Атрибуты активного таба\r\n     * @type {\r\n     *     id: string;\r\n     *     tab: HTMLElement;\r\n     * }\r\n     */\r\n    private dataTab: ITabData;\r\n\r\n    private onChangeCallback: ((param?: ITabData) => unknown) | false;\r\n    private tabItem: string;\r\n    private contentItem: string;\r\n\r\n    public init(options: ITabsOptions): void {\r\n        this._setOptions(options);\r\n        this._setInitialState();\r\n        this._bindContext();\r\n        this._bindEvents();\r\n    }\r\n\r\n    /**\r\n     * Применяет параметры\r\n     * @private\r\n     * @param {ITabsOptions} options - параметры\r\n     */\r\n    private _setOptions(options: ITabsOptions): void {\r\n        this.elem = options.elem || document;\r\n        this.hash = Boolean(options.hash);\r\n        this.initialTab = options.initialTab || null;\r\n        this.onChangeCallback = options?.onChangeCallback || false;\r\n        this.tabItem = options.tabItem ?? '.j-tabs__item';\r\n        this.contentItem = options.contentItem || '.j-tabs-content__item';\r\n\r\n        this.tabsParent = this.elem.querySelector(options.tabsParent || '.j-tabs') || null;\r\n        this.tabs = this.tabsParent ? Array.from(this.tabsParent.querySelectorAll(this.tabItem)) : [];\r\n\r\n        this.contentsParent = this.elem.querySelector(options.contentsParent || '.j-tabs-content') || null;\r\n        this.contents = this.contentsParent ? Array.from(this.contentsParent.querySelectorAll(this.contentItem)) : [];\r\n    }\r\n\r\n    /**\r\n     * Ставит начальное состояние\r\n     * @private\r\n     */\r\n    private _setInitialState(): void {\r\n        let tab = this.tabs.find((item: Element) => {\r\n            return item.classList.contains(CLASS_ACTIVE);\r\n        }) || this.tabs[0];\r\n\r\n        if (this.hash) {\r\n            const hash = this._getHash();\r\n\r\n            tab = hash ?\r\n                this.tabs.find((item: Element) => {\r\n                    return (item as HTMLElement).dataset['tab'] === hash;\r\n                }) || tab :\r\n                tab;\r\n        } else if (this.initialTab) {\r\n            tab = this.tabs.find((item: Element) => {\r\n                return (item as HTMLElement).dataset['tab'] === this.initialTab;\r\n            }) || tab;\r\n        }\r\n\r\n        this.toggleTab(tab as HTMLElement);\r\n    }\r\n\r\n    /**\r\n     * Привязывает контекст\r\n     * @private\r\n     */\r\n    private _bindContext(): void {\r\n        this._onTabs = this._onTabs.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Привязывает события\r\n     * @private\r\n     */\r\n    private _bindEvents(): void {\r\n        this.tabsParent?.addEventListener('click', this._onTabs);\r\n    }\r\n\r\n    /**\r\n     * Обрабатывает событие клика на таб\r\n     * @private\r\n     * @param {Object} event - объект события\r\n     */\r\n    private _onTabs(event: Event): void {\r\n        event.preventDefault();\r\n\r\n        const target = event.target as HTMLElement;\r\n        const tab = target?.closest(this.tabItem);\r\n\r\n        if (!tab) {\r\n            return;\r\n        }\r\n\r\n        this.toggleTab(tab);\r\n    }\r\n\r\n    /**\r\n     * Получает значение хэша\r\n     * @private\r\n     * @returns {string} - значение хэша\r\n     */\r\n    private _getHash(): string {\r\n        return window.location.hash.replace(/^#/u, '');\r\n    }\r\n\r\n    /**\r\n     * Переключает таб\r\n     * @private\r\n     * @param {Node} tab - нода активного таба\r\n     */\r\n    private toggleTab(tab: Element): void {\r\n        this._setData(tab as HTMLElement);\r\n        this._changeState();\r\n\r\n        if (this.onChangeCallback) {\r\n            this.onChangeCallback(this.dataTab);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Записывает атрибуты активного таба\r\n     * @private\r\n     * @param {HTMLElement} tab - нода активного таба\r\n     */\r\n    private _setData(tab: HTMLElement): void {\r\n        if (!tab) {\r\n            return;\r\n        }\r\n\r\n        this.dataTab = {\r\n            tab,\r\n            id: tab.dataset['tab'] || ''\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Переключает классы всем задействованным элементам\r\n     * @private\r\n     */\r\n    private _changeState(): void {\r\n        const id = this.dataTab.id;\r\n\r\n        this.tabs.forEach((elem: HTMLElement) => {\r\n            elem.classList.toggle(CLASS_ACTIVE, elem.dataset['tab'] === id);\r\n        });\r\n        this.contents.forEach((elem: HTMLElement) => {\r\n            elem.classList.toggle(CLASS_ACTIVE, elem.dataset['tab'] === id);\r\n\r\n            if ((elem as HTMLElement).dataset['tab'] === id) {\r\n                observer.publish('tabChange', elem);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default Tabs;\r\n"],"names":["observer","Observer","CLASS_ACTIVE","Tabs","_classCallCheck","_defineProperty","key","value","options","this","_setOptions","_setInitialState","_bindContext","_bindEvents","_options$tabItem","elem","document","hash","Boolean","initialTab","onChangeCallback","tabItem","contentItem","tabsParent","querySelector","tabs","Array","from","querySelectorAll","contentsParent","contents","_this","tab","find","item","classList","contains","_getHash","dataset","toggleTab","_onTabs","bind","_this$tabsParent","addEventListener","event","preventDefault","target","closest","window","location","replace","_setData","_changeState","dataTab","id","forEach","toggle","publish"],"sourceRoot":""}