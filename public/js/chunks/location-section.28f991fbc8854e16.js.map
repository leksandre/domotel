{"version":3,"file":"js/chunks/location-section.28f991fbc8854e16.js","mappings":"iQASA,I,EAAMA,EAAsB,IAAIC,EAAAA,EAK5BC,EAAkC,KAChCC,E,+CAAwBC,SAASC,iBAAiB,oC,gkBAClDC,EAAaF,SAASG,cAAc,8BACpCC,EAAwBJ,SAASG,cAAc,sBAC/CE,EAAmBL,SAASG,cAAc,iBAC1CG,EAAmBN,SAASG,cAAc,0BAE5CI,GAAW,EAETC,EAAgB,SAACC,GACkB,WAAhCA,EAAwBC,KAAxBD,MAA4CP,GAAAA,EAAYS,UAAUC,SAAS,YAE5EC,GAER,EAGMA,EAAe,WACjBX,SAAAA,EAAYS,UAAUG,OAAO,WAC7Bf,EAAkBgB,SAAQ,SAACC,GACvBA,EAAKL,UAAUG,OAAO,UAC1B,IAGA,IAAIG,EAAS,mBAETf,SAAAA,EAAYS,UAAUC,SAAS,WAE/BM,EAAAA,EAAAA,YAAoBA,EAAAA,EAAAA,UAAgBZ,IAGpCW,EAAS,sBAETC,EAAAA,EAAAA,YAAoBA,EAAAA,EAAAA,cAIxBlB,SAASiB,GAAQ,UAAWT,EAChC,EAEMW,EAAkB,WACpBZ,GAAW,EAEPF,GACA,8BACKe,MAAK,SAAAC,GAAyC,IACrCC,EAA8B,IAAIC,EADlBF,EAAlBG,SAGJF,EAAUG,KAAK,CAACC,OAAQrB,IAEpBD,IACAR,EAAS+B,UAAU,qBAAqB,WACpCvB,EAAsBwB,UAAYN,EAAUO,kBAAoB,aAAe,cACnF,IAEAzB,EAAsB0B,iBAAiB,SAAS,WAC5CR,EAAUS,qBACd,IAER,IAGJhC,GAAqBG,GACrBH,EAAkBgB,SAAQ,SAACC,GACtBA,EAAqBc,iBAAiB,SAAS,WAC5CjB,GACJ,GACJ,IAGJ,IAAMmB,EAAQC,OAAOD,MAEjBA,GACAA,EAAME,OAAM,WACR,8BACKd,MAAK,SAAAe,GAAyC,IAA9BC,EAASD,EAAlBX,QACgB,OAAhB1B,GAI0B,IAAIsC,EAAUJ,GAElCP,KAAK,CACXY,QAAyBvC,EACzBwC,SAAyB,EACzBC,mBAAyB,EACzBC,yBAAyB,EACzBC,mBAAyB,GAEjC,GACR,GAER,EA0BA,UAxBqB,SAACC,GAGlB,GAFA5C,EAAc4C,EAEV,yBAA0BT,OAAQ,CAClC,IAAMU,EAAoB,IAAIC,sBAAqB,SAACC,GAChDA,EAAQ9B,SAAQ,SAAC+B,GACTA,EAAMC,iBACDxC,GACDW,EAAAA,EAAAA,SAAeC,GAG3B,GACJ,GAAG,CAAC6B,WAAY,uBAEZ9B,EAAAA,EAAAA,aAAmBpB,EAAamC,OAAOgB,aAAejD,SAASkD,gBAAgBC,cAC/EjC,EAAAA,EAAAA,SAAeC,GAEfwB,EAAkBS,QAAQtD,E,MAG9BoB,EAAAA,EAAAA,SAAeC,EAEvB,C","sources":["webpack://multi-kelnik-2.0/./frontend/src/sections/location/index.ts"],"sourcesContent":["/**\n * Зависимости\n */\nimport type {IYandexMap, IYandexMapFilter} from '@/components/yandex-map/types';\nimport type {IDynamicImport} from '@/common/scripts/types/utils';\nimport type {IObserver} from '@/common/scripts/types/observer';\nimport Observer from '@/common/scripts/observer';\nimport {Utils} from '@/common/scripts/utils';\n\nconst observer: IObserver = new Observer();\n\n/**\n * Карта в блоке Расположение\n */\nlet locationMap: HTMLElement | null = null;\nconst filterListButtons = [...document.querySelectorAll('.j-location-filter-list-toggle')] as HTMLElement[];\nconst filterList = document.querySelector('.j-location-infrastructure') as HTMLElement;\nconst filterCheckboxToggler = document.querySelector('.j-checkbox-toggle') as HTMLElement;\nconst mapFilterWrapper = document.querySelector('.j-map-filter') as HTMLElement;\nconst mapFilterContent = document.querySelector('.j-map-filter__content') as HTMLElement;\n\nlet isLoaded = false;\n// Функция слушателя отвечающая за отслеживание нажатия кнопки Escape на клавиатуре, при открытом фильтре Инфраструктуры\nconst escapeWatcher = (event: Event): void => {\n    if ((event as KeyboardEvent).key === 'Escape' && filterList?.classList.contains('is-open')) {\n        // event.target - элемент кнопки фильтра\n        toggleFilter();\n    }\n};\n\n// Открывает-закрывает и навешивает слушатель при открытии фильтра\nconst toggleFilter = (): void => {\n    filterList?.classList.toggle('is-open');\n    filterListButtons.forEach((item: HTMLElement) => {\n        item.classList.toggle('is-open');\n    });\n\n    // Вешаем слушателя\n    let method = 'addEventListener';\n\n    if (filterList?.classList.contains('is-open')) {\n        // Фиксируем скролл страницы\n        Utils.isMobile() && Utils.bodyFixed(mapFilterContent);\n    } else {\n        // Удаляем слушателя\n        method = 'removeEventListener';\n        // Снимаем фикс со страницы\n        Utils.isMobile() && Utils.bodyStatic();\n    }\n\n    // @ts-ignore\n    document[method]('keydown', escapeWatcher);\n};\n\nconst initLocationMap = (): void => {\n    isLoaded = true;\n\n    if (mapFilterWrapper) {\n        import(/* webpackChunkName: \"map-filter\" */ '@/components/yandex-map/infrastructure-checkbox-filter')\n            .then(({default: MapFilter}: IDynamicImport) => {\n                const mapFilter: IYandexMapFilter = new MapFilter();\n\n                mapFilter.init({target: mapFilterWrapper});\n\n                if (filterCheckboxToggler) {\n                    observer.subscribe('filterMap:updated', () => {\n                        filterCheckboxToggler.innerHTML = mapFilter.globalFilterState ? 'Скрыть все' : 'Показать все';\n                    });\n\n                    filterCheckboxToggler.addEventListener('click', () => {\n                        mapFilter.changeCheckBoxState();\n                    });\n                }\n            });\n    }\n\n    if (filterListButtons && filterList) {\n        filterListButtons.forEach((item: Element) => {\n            (item as HTMLElement).addEventListener('click', () => {\n                toggleFilter();\n            });\n        });\n    }\n\n    const ymaps = window.ymaps;\n\n    if (ymaps) {\n        ymaps.ready(() => {\n            import(/* webpackChunkName: \"yandex-map\" */ '@/components/yandex-map')\n                .then(({default: YandexMap}: IDynamicImport) => {\n                    if (locationMap === null) {\n                        return;\n                    }\n\n                    const yandexMap: IYandexMap = new YandexMap(ymaps);\n\n                    yandexMap.init({\n                        wrapper                : locationMap,\n                        cluster                : true,\n                        fullScreenControl      : true,\n                        customFullScreenControl: true,\n                        customZoomControl      : true\n                    });\n                });\n        });\n    }\n};\n\nconst initLocation = (locationWrapper: HTMLElement): void => {\n    locationMap = locationWrapper;\n\n    if ('IntersectionObserver' in window) {\n        const lazyImageObserver = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\n            entries.forEach((entry: IntersectionObserverEntry) => {\n                if (entry.isIntersecting) {\n                    if (!isLoaded) {\n                        Utils.checkMap(initLocationMap);\n                    }\n                }\n            });\n        }, {rootMargin: '0px 0px 1000px 0px'});\n\n        if (Utils.isInViewport(locationMap, window.innerHeight || document.documentElement.clientHeight)) {\n            Utils.checkMap(initLocationMap);\n        } else {\n            lazyImageObserver.observe(locationMap);\n        }\n    } else {\n        Utils.checkMap(initLocationMap);\n    }\n};\n\nexport default initLocation;\n"],"names":["observer","Observer","locationMap","filterListButtons","document","querySelectorAll","filterList","querySelector","filterCheckboxToggler","mapFilterWrapper","mapFilterContent","isLoaded","escapeWatcher","event","key","classList","contains","toggleFilter","toggle","forEach","item","method","Utils","initLocationMap","then","_ref","mapFilter","MapFilter","default","init","target","subscribe","innerHTML","globalFilterState","addEventListener","changeCheckBoxState","ymaps","window","ready","_ref2","YandexMap","wrapper","cluster","fullScreenControl","customFullScreenControl","customZoomControl","locationWrapper","lazyImageObserver","IntersectionObserver","entries","entry","isIntersecting","rootMargin","innerHeight","documentElement","clientHeight","observe"],"sourceRoot":""}