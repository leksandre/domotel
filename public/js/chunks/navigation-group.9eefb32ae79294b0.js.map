{"version":3,"file":"js/chunks/navigation-group.9eefb32ae79294b0.js","mappings":"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","sources":["webpack://multi-kelnik-2.0/./frontend/src/components/navigation-group/index.ts"],"sourcesContent":["import type {INavigationGroups, INavigationGroupsElement, INavigationGroupsOptions} from './types';\r\nimport {Utils} from '@/common/scripts/utils';\r\n\r\nconst CLASS_VISIBLE = 'is-show';\r\nconst CLASS_GROUP = 'is-group';\r\nconst CLASS_ACTIVE = 'is-active';\r\nconst CLASS_OPEN = 'is-open';\r\n\r\nclass NavigationGroup implements INavigationGroups {\r\n    private navigation: HTMLElement;\r\n    private readonly navigationSelector: string;\r\n    private readonly navigationModify: string;\r\n    private navigationItems: Element[];\r\n    private windowWidth: number = Utils.getWindowWidth();\r\n\r\n    constructor(options: INavigationGroupsOptions) {\r\n        this.navigation = options.navigation;\r\n        this.navigationSelector = options.navigationSelector || '.j-group-navigation__navigation';\r\n        this.navigationModify = options.navigationModify || 'navigation_theme_group';\r\n        this.navigationItems = [...this.navigation.querySelectorAll('.j-group-navigation__item')];\r\n    }\r\n\r\n    public init(): void {\r\n        this._setNavigationItems();\r\n        this._setState();\r\n        this._bindEvents();\r\n        this._setActive();\r\n    }\r\n\r\n    private _setNavigationItems(): void {\r\n        this.navigationItems.forEach((item: Element) => {\r\n            (item as INavigationGroupsElement).isGroup = Boolean((item as HTMLElement).dataset['group']) || false;\r\n            (item as INavigationGroupsElement).show = Number((item as HTMLElement).dataset['show']) || false;\r\n            (item as INavigationGroupsElement).groupStart = Number((item as HTMLElement).dataset['groupStart']) ||\r\n                false;\r\n            (item as INavigationGroupsElement).groupEnd = Number((item as HTMLElement).dataset['groupEnd']) || false;\r\n            (item as INavigationGroupsElement).navigation = item.querySelector(this.navigationSelector) || null;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Устанавливает группировку и активность для каждого элемента\r\n     * @private\r\n     */\r\n    private _setState(): void {\r\n        this.navigationItems.forEach((element: Element) => {\r\n            const item = element as INavigationGroupsElement;\r\n\r\n            item.classList.remove(CLASS_OPEN);\r\n            item.isVisible = item.show ? this.windowWidth >= item.show : false;\r\n\r\n            item.isVisible ?\r\n                item.classList.add(CLASS_VISIBLE) :\r\n                item.classList.remove(CLASS_VISIBLE);\r\n\r\n            if (item.isGroup) {\r\n                item.isGroupActive =\r\n                    (item.groupEnd ? this.windowWidth < item.groupEnd : true) &&\r\n                    (item.groupStart ? this.windowWidth > item.groupStart : true);\r\n\r\n                if (item.isGroupActive) {\r\n                    item.classList.add(CLASS_GROUP);\r\n\r\n                    if (this.navigationModify) {\r\n                        (item.navigation as HTMLElement).classList.add(this.navigationModify);\r\n                    }\r\n                } else {\r\n                    item.classList.remove(CLASS_GROUP);\r\n\r\n                    if (this.navigationModify) {\r\n                        (item.navigation as HTMLElement).classList.remove(this.navigationModify);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Проставляет класс активности при готовности\r\n     * @private\r\n     */\r\n    private _setActive(): void {\r\n        this.navigation.classList.add(CLASS_ACTIVE);\r\n    }\r\n\r\n    /**\r\n     * Устанавливает события: при изменении экрана, навешивает обработчик по клику\r\n     * @private\r\n     */\r\n    private _bindEvents(): void {\r\n        this._bindActionsEvents();\r\n        this._windowSizeEvents();\r\n    }\r\n\r\n    /**\r\n     * Обработчик клика.\r\n     * Добавляет клик если элемент нужно группировать и если группировка активна (брейки)\r\n     * @private\r\n     */\r\n    private _bindActionsEvents(): void {\r\n        this.navigationItems.forEach((element: Element) => {\r\n            const item = element as INavigationGroupsElement;\r\n\r\n            if (item.isGroup && item.isGroupActive) {\r\n                item.addEventListener('mouseover', () => {\r\n                    this._stateHandler(item);\r\n                });\r\n\r\n                item.addEventListener('mouseout', () => {\r\n                    this._stateHandler(item, false);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Обработчик при изменении экрана\r\n     * @private\r\n     */\r\n    private _windowSizeEvents(): void {\r\n        const events = ['resize', 'orientationchange'];\r\n\r\n        events.forEach((event: string) => {\r\n            window.addEventListener(event, () => {\r\n                this.windowWidth = Utils.getWindowWidth();\r\n                this._setState();\r\n                this._bindActionsEvents();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Обработчик состояния меню\r\n     * @param {Object} item - активный элемент меню\r\n     * @param {boolean} show - флаг активности\r\n     * @private\r\n     */\r\n    private _stateHandler(item: INavigationGroupsElement, show: boolean = true): void {\r\n        if (!item.isGroupActive) {\r\n            return;\r\n        }\r\n\r\n        const method = show ? 'add' : 'remove';\r\n        const direction = this._checkDirection(item);\r\n\r\n        item.classList[method](direction, CLASS_OPEN);\r\n    }\r\n\r\n    private _checkDirection(item: INavigationGroupsElement): string {\r\n        return (item.navigation as HTMLElement).getBoundingClientRect().left +\r\n            (item.navigation as HTMLElement).offsetWidth + 50 < this.windowWidth ?\r\n            'is-right' :\r\n            'is-left';\r\n    }\r\n}\r\n\r\nexport default NavigationGroup;\r\n"],"names":["CLASS_VISIBLE","CLASS_GROUP","CLASS_OPEN","NavigationGroup","options","_classCallCheck","_defineProperty","Utils","this","navigation","navigationSelector","navigationModify","navigationItems","_toConsumableArray","querySelectorAll","key","value","_setNavigationItems","_setState","_bindEvents","_setActive","_this","forEach","item","isGroup","Boolean","dataset","show","Number","groupStart","groupEnd","querySelector","_this2","element","classList","remove","isVisible","windowWidth","add","isGroupActive","_bindActionsEvents","_windowSizeEvents","_this3","addEventListener","_stateHandler","_this4","event","window","arguments","length","undefined","method","direction","_checkDirection","getBoundingClientRect","left","offsetWidth"],"sourceRoot":""}