{"version":3,"file":"js/chunks/navigation.bb2b4d870d434785.js","mappings":"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","sources":["webpack://multi-kelnik-2.0/./frontend/src/components/navigation/index.ts","webpack://multi-kelnik-2.0/./node_modules/priority-nav/dist/priority-nav.js"],"sourcesContent":["import type {INavigation, INavigationBreaks, INavigationOptions} from './types';\r\nimport type {IObserver} from '@/common/scripts/types/observer';\r\nimport Observer from '@/common/scripts/observer';\r\n// @ts-ignore\r\nimport priorityNav from 'priority-nav';\r\n\r\nconst observer: IObserver = new Observer();\r\n\r\nclass Navigation implements INavigation {\r\n    // Тот элемент - который должен схлопываться\r\n    private navigationWrapper: HTMLElement;\r\n    // Вся шапка\r\n    private wrapper: HTMLElement;\r\n    // Массив с элементами лого и блоком с телефоном\r\n    private driveElements: Element[];\r\n    private foldingNavigation: string | null;\r\n    private breaks: INavigationBreaks;\r\n    private offset: number;\r\n    private isActive: boolean = false;\r\n\r\n    public init(options: INavigationOptions): void {\r\n        this.navigationWrapper = options.target;\r\n        this.wrapper = this.navigationWrapper.closest(options.wrapper) as HTMLElement;\r\n        this.driveElements = [...this.wrapper.querySelectorAll(options.driveElements)];\r\n        this.foldingNavigation = options.foldingNavigation || null;\r\n        this.breaks = options.breaks ?? {\r\n            min: 320,\r\n            max: 1920\r\n        };\r\n        this.offset = options.offset ?? 15;\r\n\r\n        this._bindEvents();\r\n        this._setSize();\r\n        this._setState();\r\n    }\r\n\r\n    private _bindEvents(): void {\r\n        const events = ['resize', 'orientationchange'];\r\n\r\n        events.forEach((event: string) => {\r\n            window.addEventListener(event, this._setSize.bind(this));\r\n        });\r\n    }\r\n\r\n    private _setSize(): void {\r\n        if (this.isActive && (this.breaks.min > window.innerWidth && window.innerWidth > this.breaks.max)) {\r\n            return;\r\n        }\r\n\r\n        let navWidth = this.driveElements.reduce((startWidth: number, driveElement: Element) => {\r\n            return startWidth - (driveElement as HTMLElement).offsetWidth;\r\n        }, this.wrapper.offsetWidth);\r\n\r\n        const navigationOffset = getComputedStyle(this.navigationWrapper);\r\n\r\n        navWidth = navWidth - parseInt(navigationOffset.marginLeft) + parseInt(navigationOffset.marginRight);\r\n        this.navigationWrapper.style.width = `${navWidth - this.offset}px`;\r\n\r\n        if (this.foldingNavigation) {\r\n            this._setFoldingNavigationIcon();\r\n        }\r\n    }\r\n\r\n    private _setState(): void {\r\n        this._setFoldingNavigation();\r\n        this.navigationWrapper.classList.add('is-active');\r\n        this.isActive = true;\r\n        // 300 - время анимации\r\n        setTimeout(() => {\r\n            observer.publish('navigation:ready');\r\n        }, 300);\r\n    }\r\n\r\n    private _setFoldingNavigation(): void {\r\n        if (!this.foldingNavigation) {\r\n            return;\r\n        }\r\n\r\n        priorityNav.init({\r\n            mainNavWrapper            : '.j-folding-navigation',\r\n            breakPoint                : 0,\r\n            throttleDelay             : '0',\r\n            navDropdownLabel          : '',\r\n            navDropdownBreakpointLabel: ''\r\n        });\r\n\r\n        this._setFoldingNavigationIcon();\r\n    }\r\n\r\n    private _setFoldingNavigationIcon(): void {\r\n        const selector = document.querySelector('.priority-nav__dropdown-toggle');\r\n\r\n        const icon = `<svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <circle cx=\"19.5\" cy=\"13.5\" r=\"1.5\"/>\r\n                <circle cx=\"19.5\" cy=\"19.5\" r=\"1.5\"/>\r\n                <circle cx=\"19.5\" cy=\"25.5\" r=\"1.5\"/>\r\n            </svg>`;\r\n\r\n        if (selector) {\r\n            setTimeout(() => {\r\n                selector.innerHTML = `${icon}`;\r\n                this._setListener(selector as HTMLElement);\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Обрабатывает клики на раскрывающемся меню схлопывающегося меню\r\n     * @param {object} selector - Элемент кнопки раскрытия доп списка\r\n     */\r\n    private _setListener(selector: HTMLElement): void {\r\n        if (!selector) {\r\n            return;\r\n        }\r\n\r\n        const dropdown = document.querySelector('.priority-nav__dropdown');\r\n\r\n        if (!dropdown) {\r\n            return;\r\n        }\r\n        const dropdownItems = [...dropdown.querySelectorAll('.navigation__item')];\r\n\r\n        dropdownItems.forEach((item: Element) => {\r\n            (item as HTMLElement).addEventListener('click', () => {\r\n                dropdown.classList.remove('show');\r\n                selector.classList.remove('is-open');\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport default Navigation;\r\n","/*\n * priority-nav - v1.0.13 | (c) 2018 @gijsroge | MIT license\n * Repository: https://github.com/gijsroge/priority-navigation.git\n * Description: Priority+ pattern navigation that hides menu items if they don't fit on screen.\n * Demo: http://gijsroge.github.io/priority-nav.js/\n */\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(\"priorityNav\", factory(root));\n    } else if (typeof exports === \"object\") {\n        module.exports = factory(root);\n    } else {\n        root.priorityNav = factory(root);\n    }\n})(window || this, function (root) {\n\n    \"use strict\";\n\n    /**\n     * Variables\n     */\n    var priorityNav = {}; // Object for public APIs\n    var breaks = []; // Object to store instances with breakpoints where the instances menu item\"s didin\"t fit.\n    var supports = !!document.querySelector && !!root.addEventListener; // Feature test\n    var settings = {};\n    var instance = 0;\n    var count = 0;\n    var mainNavWrapper, totalWidth, restWidth, mainNav, navDropdown, navDropdownToggle, dropDownWidth, toggleWrapper;\n    var viewportWidth = 0;\n\n    /**\n     * Default settings\n     * @type {{initClass: string, navDropdown: string, navDropdownToggle: string, mainNavWrapper: string, moved: Function, movedBack: Function}}\n     */\n    var defaults = {\n        initClass:                  \"js-priorityNav\", // Class that will be printed on html element to allow conditional css styling.\n        mainNavWrapper:             \"nav\", // mainnav wrapper selector (must be direct parent from mainNav)\n        mainNav:                    \"ul\", // mainnav selector. (must be inline-block)\n        navDropdownClassName:       \"nav__dropdown\", // class used for the dropdown.\n        navDropdownToggleClassName: \"nav__dropdown-toggle\", // class used for the dropdown toggle.\n        navDropdownLabel:           \"more\", // Text that is used for the dropdown toggle.\n        navDropdownBreakpointLabel: \"menu\", //button label for navDropdownToggle when the breakPoint is reached.\n        breakPoint:                 500, //amount of pixels when all menu items should be moved to dropdown to simulate a mobile menu\n        throttleDelay:              50, // this will throttle the calculating logic on resize because i'm a responsible dev.\n        offsetPixels:               0, // increase to decrease the time it takes to move an item.\n        count:                      true, // prints the amount of items are moved to the attribute data-count to style with css counter.\n\n        //Callbacks\n        moved: function () {\n        },\n        movedBack: function () {\n        }\n    };\n\n\n    /**\n     * A simple forEach() implementation for Arrays, Objects and NodeLists\n     * @private\n     * @param {Array|Object|NodeList} collection Collection of items to iterate\n     * @param {Function} callback Callback function for each iteration\n     * @param {Array|Object|NodeList} scope Object/NodeList/Array that forEach is iterating over (aka `this`)\n     */\n    var forEach = function (collection, callback, scope) {\n        if (Object.prototype.toString.call(collection) === \"[object Object]\") {\n            for (var prop in collection) {\n                if (Object.prototype.hasOwnProperty.call(collection, prop)) {\n                    callback.call(scope, collection[prop], prop, collection);\n                }\n            }\n        } else {\n            for (var i = 0, len = collection.length; i < len; i++) {\n                callback.call(scope, collection[i], i, collection);\n            }\n        }\n    };\n\n\n    /**\n     * Get the closest matching element up the DOM tree\n     * @param {Element} elem Starting element\n     * @param {String} selector Selector to match against (class, ID, or data attribute)\n     * @return {Boolean|Element} Returns false if not match found\n     */\n    var getClosest = function (elem, selector) {\n        var firstChar = selector.charAt(0);\n        for (; elem && elem !== document; elem = elem.parentNode) {\n            if (firstChar === \".\") {\n                if (elem.classList.contains(selector.substr(1))) {\n                    return elem;\n                }\n            } else if (firstChar === \"#\") {\n                if (elem.id === selector.substr(1)) {\n                    return elem;\n                }\n            } else if (firstChar === \"[\") {\n                if (elem.hasAttribute(selector.substr(1, selector.length - 2))) {\n                    return elem;\n                }\n            }\n        }\n        return false;\n    };\n\n\n    /**\n     * Merge defaults with user options\n     * @private\n     * @param {Object} defaults Default settings\n     * @param {Object} options User options\n     * @returns {Object} Merged values of defaults and options\n     */\n    var extend = function (defaults, options) {\n        var extended = {};\n        forEach(defaults, function (value, prop) {\n            extended[prop] = defaults[prop];\n        });\n        forEach(options, function (value, prop) {\n            extended[prop] = options[prop];\n        });\n        return extended;\n    };\n\n\n    /**\n     * Debounced resize to throttle execution\n     * @param func\n     * @param wait\n     * @param immediate\n     * @returns {Function}\n     */\n    function debounce(func, wait, immediate) {\n        var timeout;\n        return function () {\n            var context = this, args = arguments;\n            var later = function () {\n                timeout = null;\n                if (!immediate) func.apply(context, args);\n            };\n            var callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) func.apply(context, args);\n        };\n    }\n\n\n    /**\n     * Toggle class on element\n     * @param el\n     * @param className\n     */\n    var toggleClass = function (el, className) {\n        if (el.classList) {\n            el.classList.toggle(className);\n        } else {\n            var classes = el.className.split(\" \");\n            var existingIndex = classes.indexOf(className);\n\n            if (existingIndex >= 0)\n                classes.splice(existingIndex, 1); else\n                classes.push(className);\n\n            el.className = classes.join(\" \");\n        }\n    };\n\n\n    /**\n     * Check if dropdown menu is already on page before creating it\n     * @param mainNavWrapper\n     */\n    var prepareHtml = function (_this, settings) {\n\n        /**\n         * Create dropdow menu\n         * @type {HTMLElement}\n         */\n        toggleWrapper = document.createElement(\"span\");\n        navDropdown = document.createElement(\"ul\");\n        navDropdownToggle = document.createElement(\"button\");\n\n        /**\n         * Set label for dropdown toggle\n         * @type {string}\n         */\n        navDropdownToggle.innerHTML = settings.navDropdownLabel;\n\n        /**\n         * Set aria attributes for accessibility\n         */\n        navDropdownToggle.setAttribute(\"aria-controls\", \"menu\");\n        navDropdownToggle.setAttribute(\"type\", \"button\");\n        navDropdown.setAttribute(\"aria-hidden\", \"true\");\n\n\n        /**\n         * Move elements to the right spot\n         */\n        if(_this.querySelector(mainNav).parentNode !== _this){\n            console.warn(\"mainNav is not a direct child of mainNavWrapper, double check please\");\n            return;\n        }\n\n        _this.insertAfter(toggleWrapper, _this.querySelector(mainNav));\n\n        toggleWrapper.appendChild(navDropdownToggle);\n        toggleWrapper.appendChild(navDropdown);\n\n        /**\n         * Add classes so we can target elements\n         */\n        navDropdown.classList.add(settings.navDropdownClassName);\n        navDropdown.classList.add(\"priority-nav__dropdown\");\n\n        navDropdownToggle.classList.add(settings.navDropdownToggleClassName);\n        navDropdownToggle.classList.add(\"priority-nav__dropdown-toggle\");\n        \n        //fix so button is type=\"button\" and do not submit forms\n        navDropdownToggle.setAttribute(\"type\", \"button\");\n\n        toggleWrapper.classList.add(settings.navDropdownClassName+\"-wrapper\");\n        toggleWrapper.classList.add(\"priority-nav__wrapper\");\n\n        _this.classList.add(\"priority-nav\");\n    };\n\n\n    /**\n     * Get innerwidth without padding\n     * @param element\n     * @returns {number}\n     */\n    var getElementContentWidth = function(element) {\n        var styles = window.getComputedStyle(element);\n        var padding = parseFloat(styles.paddingLeft) +\n            parseFloat(styles.paddingRight);\n\n        return element.clientWidth - padding;\n    };\n\n\n    /**\n     * Get viewport size\n     * @returns {{width: number, height: number}}\n     */\n    var viewportSize = function() {\n        var doc = document, w = window;\n        var docEl = (doc.compatMode && doc.compatMode === \"CSS1Compat\")?\n            doc.documentElement: doc.body;\n\n        var width = docEl.clientWidth;\n        var height = docEl.clientHeight;\n\n        // mobile zoomed in?\n        if ( w.innerWidth && width > w.innerWidth ) {\n            width = w.innerWidth;\n            height = w.innerHeight;\n        }\n\n        return {width: width, height: height};\n    };\n\n\n    /**\n     * Get width\n     * @param elem\n     * @returns {number}\n     */\n    var calculateWidths = function (_this) {\n        totalWidth = getElementContentWidth(_this);\n        //Check if parent is the navwrapper before calculating its width\n        if (_this.querySelector(navDropdown).parentNode === _this) {\n            dropDownWidth = _this.querySelector(navDropdown).offsetWidth;\n        } else {\n            dropDownWidth = 0;\n        }\n        restWidth = getChildrenWidth(_this) + settings.offsetPixels;\n        viewportWidth = viewportSize().width;\n    };\n\n\n    /**\n     * Move item to array\n     * @param item\n     */\n    priorityNav.doesItFit = function (_this) {\n\n        /**\n         * Check if it is the first run\n         */\n        var delay = _this.getAttribute(\"instance\") === 0 ? delay : settings.throttleDelay;\n\n        /**\n         * Increase instance\n         */\n        instance++;\n\n        /**\n         * Debounced execution of the main logic\n         */\n        (debounce(function () {\n\n            /**\n             * Get the current element\"s instance\n             * @type {string}\n             */\n            var identifier = _this.getAttribute(\"instance\");\n\n            /**\n             * Update width\n             */\n            calculateWidths(_this);\n\n            /**\n             * Keep executing until all menu items that are overflowing are moved\n             */\n            while (totalWidth <= restWidth  && _this.querySelector(mainNav).children.length > 0 || viewportWidth < settings.breakPoint && _this.querySelector(mainNav).children.length > 0) {\n                //move item to dropdown\n                priorityNav.toDropdown(_this, identifier);\n                //recalculate widths\n                calculateWidths(_this, identifier);\n                //update dropdownToggle label\n                if(viewportWidth < settings.breakPoint) updateLabel(_this, identifier, settings.navDropdownBreakpointLabel);\n            }\n\n            /**\n             * Keep executing until all menu items that are able to move back are moved\n             */\n            while (totalWidth >= breaks[identifier][breaks[identifier].length - 1] && viewportWidth > settings.breakPoint) {\n                //move item to menu\n                priorityNav.toMenu(_this, identifier);\n                //update dropdownToggle label\n                if(viewportWidth > settings.breakPoint) updateLabel(_this, identifier, settings.navDropdownLabel);\n            }\n\n            /**\n             * If there are no items in dropdown hide dropdown\n             */\n            if (breaks[identifier].length < 1) {\n                _this.querySelector(navDropdown).classList.remove(\"show\");\n                //show navDropdownLabel\n                updateLabel(_this, identifier, settings.navDropdownLabel);\n            }\n\n            /**\n             * If there are no items in menu\n             */\n            if (_this.querySelector(mainNav).children.length < 1) {\n                //show navDropdownBreakpointLabel\n                _this.classList.add(\"is-empty\");\n                updateLabel(_this, identifier, settings.navDropdownBreakpointLabel);\n            }else{\n                _this.classList.remove(\"is-empty\");\n            }\n\n            /**\n             * Check if we need to show toggle menu button\n             */\n            showToggle(_this, identifier);\n\n        }, delay ))();\n    };\n\n\n    /**\n     * Show/hide toggle button\n     */\n    var showToggle = function (_this, identifier) {\n        if (breaks[identifier].length < 1) {\n            _this.querySelector(navDropdownToggle).classList.add(\"priority-nav-is-hidden\");\n            _this.querySelector(navDropdownToggle).classList.remove(\"priority-nav-is-visible\");\n            _this.classList.remove(\"priority-nav-has-dropdown\");\n\n            /**\n             * Set aria attributes for accessibility\n             */\n            _this.querySelector(\".priority-nav__wrapper\").setAttribute(\"aria-haspopup\", \"false\");\n\n        } else {\n            _this.querySelector(navDropdownToggle).classList.add(\"priority-nav-is-visible\");\n            _this.querySelector(navDropdownToggle).classList.remove(\"priority-nav-is-hidden\");\n            _this.classList.add(\"priority-nav-has-dropdown\");\n\n            /**\n             * Set aria attributes for accessibility\n             */\n            _this.querySelector(\".priority-nav__wrapper\").setAttribute(\"aria-haspopup\", \"true\");\n        }\n    };\n\n\n    /**\n     * Update count on dropdown toggle button\n     */\n    var updateCount = function (_this, identifier) {\n        _this.querySelector(navDropdownToggle).setAttribute(\"priorityNav-count\", breaks[identifier].length);\n    };\n\n    var updateLabel = function(_this, identifier, label){\n        _this.querySelector(navDropdownToggle).innerHTML = label;\n    };\n\n\n    /**\n     * Move item to dropdown\n     */\n    priorityNav.toDropdown = function (_this, identifier) {\n\n\n        /**\n         * move last child of navigation menu to dropdown\n         */\n        if (_this.querySelector(navDropdown).firstChild && _this.querySelector(mainNav).children.length > 0) {\n            _this.querySelector(navDropdown).insertBefore(_this.querySelector(mainNav).lastElementChild, _this.querySelector(navDropdown).firstChild);\n        } else if (_this.querySelector(mainNav).children.length > 0) {\n            _this.querySelector(navDropdown).appendChild(_this.querySelector(mainNav).lastElementChild);\n        }\n\n        /**\n         * store breakpoints\n         */\n        breaks[identifier].push(restWidth);\n\n        /**\n         * check if we need to show toggle menu button\n         */\n        showToggle(_this, identifier);\n\n        /**\n         * update count on dropdown toggle button\n         */\n        if (_this.querySelector(mainNav).children.length > 0 && settings.count) {\n            updateCount(_this, identifier);\n        }\n\n        /**\n         * If item has been moved to dropdown trigger the callback\n         */\n        settings.moved();\n    };\n\n\n    /**\n     * Move item to menu\n     */\n    priorityNav.toMenu = function (_this, identifier) {\n\n        /**\n         * move last child of navigation menu to dropdown\n         */\n        if (_this.querySelector(navDropdown).children.length > 0) _this.querySelector(mainNav).appendChild(_this.querySelector(navDropdown).firstElementChild);\n\n        /**\n         * remove last breakpoint\n         */\n        breaks[identifier].pop();\n\n        /**\n         * Check if we need to show toggle menu button\n         */\n        showToggle(_this, identifier);\n\n        /**\n         * update count on dropdown toggle button\n         */\n        if (_this.querySelector(mainNav).children.length > 0 && settings.count) {\n            updateCount(_this, identifier);\n        }\n\n        /**\n         * If item has been moved back to the main menu trigger the callback\n         */\n        settings.movedBack();\n    };\n\n\n    /**\n     * Count width of children and return the value\n     * @param e\n     */\n    var getChildrenWidth = function (e) {\n        var children = e.childNodes;\n        var sum = 0;\n        for (var i = 0; i < children.length; i++) {\n            if (children[i].nodeType !== 3) {\n                if(!isNaN(children[i].offsetWidth)){\n                    sum += children[i].offsetWidth;\n                }\n\n            }\n        }\n        return sum;\n    };\n\n\n\n    /**\n     * Bind eventlisteners\n     */\n    var listeners = function (_this, settings) {\n\n        // Check if an item needs to move\n        if(window.attachEvent) {\n            window.attachEvent(\"onresize\", function() {\n                if(priorityNav.doesItFit)priorityNav.doesItFit(_this);\n            });\n        }\n        else if(window.addEventListener) {\n            window.addEventListener(\"resize\", function() {\n                if(priorityNav.doesItFit)priorityNav.doesItFit(_this);\n            }, true);\n        }\n\n        // Toggle dropdown\n        _this.querySelector(navDropdownToggle).addEventListener(\"click\", function () {\n            toggleClass(_this.querySelector(navDropdown), \"show\");\n            toggleClass(this, \"is-open\");\n            toggleClass(_this, \"is-open\");\n\n            /**\n             * Toggle aria hidden for accessibility\n             */\n            if(-1 !== _this.className.indexOf( \"is-open\" )){\n                _this.querySelector(navDropdown).setAttribute(\"aria-hidden\", \"false\");\n            }else{\n                _this.querySelector(navDropdown).setAttribute(\"aria-hidden\", \"true\");\n                _this.querySelector(navDropdown).blur();\n            }\n        });\n\n        /*\n         * Remove when clicked outside dropdown\n         */\n        document.addEventListener(\"click\", function (event) {\n            if (!getClosest(event.target, \".\"+settings.navDropdownClassName) && event.target !== _this.querySelector(navDropdownToggle)) {\n                _this.querySelector(navDropdown).classList.remove(\"show\");\n                _this.querySelector(navDropdownToggle).classList.remove(\"is-open\");\n                _this.classList.remove(\"is-open\");\n            }\n        });\n\n        /**\n         * Remove when escape key is pressed\n         */\n        document.onkeydown = function (evt) {\n            evt = evt || window.event;\n            if (evt.keyCode === 27) {\n                document.querySelector(navDropdown).classList.remove(\"show\");\n                document.querySelector(navDropdownToggle).classList.remove(\"is-open\");\n                mainNavWrapper.classList.remove(\"is-open\");\n            }\n        };\n    };\n\n\n    /**\n     * Remove function\n     */\n    Element.prototype.remove = function() {\n        this.parentElement.removeChild(this);\n    };\n\n    /*global HTMLCollection */\n    NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {\n        for(var i = 0, len = this.length; i < len; i++) {\n            if(this[i] && this[i].parentElement) {\n                this[i].parentElement.removeChild(this[i]);\n            }\n        }\n    };\n\n\n    /**\n     * Destroy the current initialization.\n     * @public\n     */\n    priorityNav.destroy = function () {\n        // If plugin isn\"t already initialized, stop\n        if (!settings) return;\n        // Remove feedback class\n        document.documentElement.classList.remove(settings.initClass);\n        // Remove toggle\n        toggleWrapper.remove();\n        // Remove settings\n        settings = null;\n        delete priorityNav.init;\n        delete priorityNav.doesItFit;\n    };\n\n\n    /**\n     * insertAfter function\n     * @param n\n     * @param r\n     */\n    if (supports && typeof Node !== \"undefined\"){\n        Node.prototype.insertAfter = function(n,r) {this.insertBefore(n,r.nextSibling);};\n    }\n\n    var checkForSymbols = function(string){\n        var firstChar = string.charAt(0);\n        if (firstChar === \".\" || firstChar === \"#\") {\n            return false;\n        }else{\n            return true;\n        }\n    };\n\n\n    /**\n     * Initialize Plugin\n     * @public\n     * @param {Object} options User settings\n     */\n    priorityNav.init = function (options) {\n\n        /**\n         * Merge user options with defaults\n         * @type {Object}\n         */\n        settings = extend(defaults, options || {});\n\n        // Feature test.\n        if (!supports && typeof Node === \"undefined\"){\n            console.warn(\"This browser doesn't support priorityNav\");\n            return;\n        }\n\n        // Options check\n        if (!checkForSymbols(settings.navDropdownClassName) || !checkForSymbols(settings.navDropdownToggleClassName)){\n            console.warn(\"No symbols allowed in navDropdownClassName & navDropdownToggleClassName. These are not selectors.\");\n            return;\n        }\n\n        /**\n         * Store nodes\n         * @type {NodeList}\n         */\n        var elements = document.querySelectorAll(settings.mainNavWrapper);\n\n        /**\n         * Loop over every instance and reference _this\n         */\n        forEach(elements, function(_this){\n\n            /**\n             * Create breaks array\n             * @type {number}\n             */\n            breaks[count] = [];\n\n            /**\n             * Set the instance number as data attribute\n             */\n            _this.setAttribute(\"instance\", count++);\n\n            /**\n             * Store the wrapper element\n             */\n            mainNavWrapper = _this;\n            if (!mainNavWrapper) {\n                console.warn(\"couldn't find the specified mainNavWrapper element\");\n                return;\n            }\n\n            /**\n             * Store the menu elementStore the menu element\n             */\n            mainNav = settings.mainNav;\n            if (!_this.querySelector(mainNav)) {\n                console.warn(\"couldn't find the specified mainNav element\");\n                return;\n            }\n\n            /**\n             * Check if we need to create the dropdown elements\n             */\n            prepareHtml(_this, settings);\n\n            /**\n             * Store the dropdown element\n             */\n            navDropdown = \".\"+settings.navDropdownClassName;\n            if (!_this.querySelector(navDropdown)) {\n                console.warn(\"couldn't find the specified navDropdown element\");\n                return;\n            }\n\n            /**\n             * Store the dropdown toggle element\n             */\n            navDropdownToggle = \".\"+settings.navDropdownToggleClassName;\n            if (!_this.querySelector(navDropdownToggle)) {\n                console.warn(\"couldn't find the specified navDropdownToggle element\");\n                return;\n            }\n\n            /**\n             * Event listeners\n             */\n            listeners(_this, settings);\n\n            /**\n             * Start first check\n             */\n            priorityNav.doesItFit(_this);\n\n        });\n\n        /**\n         * Count amount of instances\n         */\n        instance++;\n\n        /**\n         * Add class to HTML element to activate conditional CSS\n         */\n        document.documentElement.classList.add(settings.initClass);\n    };\n\n\n    /**\n     * Public APIs\n     */\n    return priorityNav;\n\n});\n"],"names":["observer","Observer","Navigation","_classCallCheck","_defineProperty","key","value","options","_options$breaks","_options$offset","this","navigationWrapper","target","wrapper","closest","driveElements","_toConsumableArray","querySelectorAll","foldingNavigation","breaks","min","max","offset","_bindEvents","_setSize","_setState","_this","forEach","event","window","addEventListener","bind","isActive","innerWidth","navWidth","reduce","startWidth","driveElement","offsetWidth","navigationOffset","getComputedStyle","parseInt","marginLeft","marginRight","style","width","concat","_setFoldingNavigationIcon","_setFoldingNavigation","classList","add","setTimeout","publish","priorityNav","mainNavWrapper","breakPoint","throttleDelay","navDropdownLabel","navDropdownBreakpointLabel","_this2","selector","document","querySelector","innerHTML","_setListener","dropdown","item","remove","root","totalWidth","restWidth","mainNav","navDropdown","navDropdownToggle","toggleWrapper","supports","settings","count","viewportWidth","defaults","initClass","navDropdownClassName","navDropdownToggleClassName","offsetPixels","moved","movedBack","collection","callback","scope","Object","prototype","toString","call","prop","hasOwnProperty","i","len","length","getClosest","elem","firstChar","charAt","parentNode","contains","substr","id","hasAttribute","extend","extended","debounce","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","toggleClass","el","className","toggle","classes","split","existingIndex","indexOf","splice","push","join","prepareHtml","createElement","setAttribute","insertAfter","appendChild","console","warn","getElementContentWidth","element","styles","padding","parseFloat","paddingLeft","paddingRight","clientWidth","viewportSize","doc","w","docEl","compatMode","documentElement","body","height","clientHeight","innerHeight","calculateWidths","getChildrenWidth","doesItFit","delay","getAttribute","identifier","children","toDropdown","updateLabel","toMenu","showToggle","updateCount","label","firstChild","insertBefore","lastElementChild","firstElementChild","pop","e","childNodes","sum","nodeType","isNaN","listeners","attachEvent","blur","onkeydown","evt","keyCode","Element","parentElement","removeChild","NodeList","HTMLCollection","destroy","init","Node","n","r","nextSibling","checkForSymbols","string","elements"],"sourceRoot":""}