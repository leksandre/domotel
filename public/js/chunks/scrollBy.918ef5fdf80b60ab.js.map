{"version":3,"file":"js/chunks/scrollBy.918ef5fdf80b60ab.js","mappings":"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","sources":["webpack://multi-kelnik-2.0/./frontend/src/components/scrollAnimation/index.ts","webpack://multi-kelnik-2.0/./frontend/src/components/scrollBy/index.ts"],"sourcesContent":["import type {IScrollAnimation, IScrollAnimationOptions} from './types';\r\n\r\nclass scrollAnimation implements IScrollAnimation {\r\n    private readonly targetY: number;\r\n    private readonly duration: number;\r\n    private start: number;\r\n    private readonly startY: number;\r\n    private animationName: number;\r\n\r\n    constructor(options: IScrollAnimationOptions) {\r\n        this.targetY = options.targetY ?? 0;\r\n        this.duration = options.duration || 600;\r\n        this.start = 0;\r\n        this.startY = window.pageYOffset;\r\n    }\r\n\r\n    public scroll(targetCoord?: number | undefined, offset: number = 0): void {\r\n        const targetY = targetCoord || this.targetY;\r\n        const diff = targetY - this.startY - offset;\r\n\r\n        const step = (timestamp: number): void => {\r\n            if (!this.start) {\r\n                this.start = timestamp;\r\n            }\r\n\r\n            const time = timestamp - this.start;\r\n            const percent = Math.min(time / this.duration, 1);\r\n\r\n            window.scrollTo(0, this.startY + (diff * percent));\r\n\r\n            if (time < this.duration) {\r\n                this.animationName = window.requestAnimationFrame(step.bind(this));\r\n            }\r\n        };\r\n\r\n        this.animationName = window.requestAnimationFrame(step.bind(this));\r\n    }\r\n}\r\n\r\nexport default scrollAnimation;\r\n","import type {IScrollBy, IScrollByOptions} from './types';\r\nimport type {IObserver} from '@/common/scripts/types/observer';\r\nimport Observer from '@/common/scripts/observer';\r\nimport ScrollAnimation from '../scrollAnimation';\r\n\r\nconst observer: IObserver = new Observer();\r\nconst ANIMATION_SPEED = 300;\r\n\r\nclass ScrollBy implements IScrollBy {\r\n    private options: IScrollByOptions = {\r\n        anchors       : [],\r\n        offset        : 0,\r\n        animate       : true,\r\n        speedAnimation: 1000,\r\n        takeElements  : []\r\n    };\r\n\r\n    private offset: number;\r\n    public init(options: Partial<IScrollByOptions>): void {\r\n        this.options = Object.assign(this.options, options);\r\n        this.offset = this.options.offset || 0;\r\n\r\n        this._initAnchors();\r\n        this._parseHashParams();\r\n    }\r\n\r\n    /**\r\n     * Метод скроллит по клику на кнопку с указанными в data-атрибуте id элемента, к которому нужно проскролить\r\n     * @param {object} element - дом-элемент с которого ловится клик\r\n     * @public\r\n     */\r\n    public scrollToHref(element: HTMLElement): void {\r\n        element.addEventListener('click', (event: MouseEvent) => {\r\n            event.preventDefault();\r\n\r\n            const id = element.dataset['scrollBy'] || element.getAttribute('href');\r\n\r\n            if (!id) {\r\n                return;\r\n            }\r\n            const target = document.querySelector(id);\r\n\r\n            if (!target) {\r\n                return;\r\n            }\r\n\r\n            this._setActiveClass(element);\r\n            this._setOffsetTakeElements();\r\n            this._scroll(target as HTMLElement);\r\n            this._setGetParams(id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Метод скроллит к DOM-элементу\r\n     * @param {object} element - дом-элемент к которому необходимо проскролить\r\n     * @public\r\n     */\r\n    public scrollToElement(element: HTMLElement): void {\r\n        this._scroll(element);\r\n    }\r\n\r\n    /**\r\n     * Метод скроллит к якорю из гет-параметра\r\n     * @public\r\n     */\r\n    public scrollToGetAnchor(): void {\r\n        this._parseGetParams();\r\n    }\r\n\r\n    /**\r\n     * Метод скроллит наверх страницы\r\n     * @public\r\n     */\r\n    public scrollToTop(): void {\r\n        this._scroll();\r\n    }\r\n\r\n    /**\r\n     * Метод инициализирует якоря из массива.\r\n     * @private\r\n     */\r\n    private _initAnchors(): void {\r\n        if (!this.options.anchors.length) {\r\n            return;\r\n        }\r\n\r\n        this.options.anchors.forEach((item: Element) => {\r\n            this.scrollToHref(item as HTMLElement);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Метод выполняет анимацию скролла\r\n     * @param {object} element - дом-элемент к которому необходимо проскролить\r\n     * @private\r\n     */\r\n    private _scroll(element?: HTMLElement): void {\r\n        const x = 0;\r\n        const y = element ? (element.getBoundingClientRect().top + scrollY) - this.offset : 0;\r\n\r\n        observer.publish('scrollBy:start');\r\n\r\n        if (this.options.animate) {\r\n            const scrollAnimation = new ScrollAnimation({\r\n                duration: this.options.speedAnimation,\r\n                targetY : y\r\n            });\r\n\r\n            scrollAnimation.scroll();\r\n\r\n            setTimeout(() => {\r\n                observer.publish('scrollBy:finish');\r\n            }, this.options.speedAnimation);\r\n        }\r\n\r\n        if (!this.options.animate) {\r\n            window.scrollTo(x, y);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод парсит гет-параметры\r\n     * @private\r\n     */\r\n    private _parseGetParams(): void {\r\n        const get = window.location.search;\r\n\r\n        if (get) {\r\n            const url = new URLSearchParams(get);\r\n\r\n            for (const item of url.entries()) {\r\n                if (item[0] === 'anchor') {\r\n                    const element = document.querySelector(`#${item[1]}`);\r\n\r\n                    this._scroll(element as HTMLElement);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод парсит hash-параметр\r\n     * @private\r\n     */\r\n    private _parseHashParams(): void {\r\n        const hash = window.location.hash;\r\n        const isScroll = Boolean(hash) && this.options.anchors.reduce((isSame: boolean, item: Element) => {\r\n            return isSame || (item as HTMLLinkElement).href === hash;\r\n        }, false);\r\n\r\n        if (isScroll) {\r\n            const element = document.querySelector(`${hash}`);\r\n\r\n            if (element) {\r\n                document.addEventListener('readystatechange', () => {\r\n                    if (document.readyState === 'complete') {\r\n                        setTimeout(() => {\r\n                            this._setOffsetTakeElements();\r\n                            this._scroll(element as HTMLElement);\r\n                        }, ANIMATION_SPEED);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Устанавливает отступ в зависимости от высоты переданного элемента и дополнительной настройки\r\n     * @private\r\n     */\r\n    private _setOffsetTakeElements(): void {\r\n        if (this.options.takeElements.length) {\r\n            let sum = 0;\r\n\r\n            this.options.takeElements.forEach((item: Element) => {\r\n                sum = sum + (item as HTMLElement).offsetHeight;\r\n            });\r\n\r\n            this.offset = -this.offset + sum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Устанавливает активный класс для якоря\r\n     * @param {object} element - дом-элемент по которому произошел клик\r\n     * @private\r\n     */\r\n    private _setActiveClass(element: HTMLElement): void {\r\n        if (!this.options.anchors.length) {\r\n            return;\r\n        }\r\n\r\n        this.options.anchors.forEach((item: HTMLElement) => {\r\n            item.classList.remove('is-active');\r\n        });\r\n\r\n        element.classList.add('is-active');\r\n    }\r\n\r\n    /**\r\n     * Устанавливает id якоря как гет-параметр\r\n     * @param {id} id - id якоря\r\n     * @private\r\n     */\r\n    private _setGetParams(id: string): void {\r\n        document.location.hash = id;\r\n    }\r\n}\r\n\r\nexport default ScrollBy;\r\n"],"names":["scrollAnimation","options","_options$targetY","_classCallCheck","_defineProperty","this","targetY","duration","start","startY","window","pageYOffset","key","value","targetCoord","_this","offset","arguments","length","undefined","diff","animationName","requestAnimationFrame","step","timestamp","time","percent","Math","min","scrollTo","bind","observer","Observer","ScrollBy","anchors","animate","speedAnimation","takeElements","Object","assign","_initAnchors","_parseHashParams","element","addEventListener","event","preventDefault","id","dataset","getAttribute","target","document","querySelector","_setActiveClass","_setOffsetTakeElements","_scroll","_setGetParams","_parseGetParams","_this2","forEach","item","scrollToHref","y","getBoundingClientRect","top","scrollY","publish","ScrollAnimation","scroll","setTimeout","get","location","search","_step","_iterator","_createForOfIteratorHelper","URLSearchParams","entries","s","n","done","concat","err","e","f","_this3","hash","Boolean","reduce","isSame","href","readyState","sum","offsetHeight","classList","remove","add"],"sourceRoot":""}