{"version":3,"file":"js/chunks/btn-trigger.8c5f181389988e7c.js","mappings":"0KAAYA,E,WAAZ,SAAYA,GACRA,EAAA,YACAA,EAAA,aACH,CAHD,CAAYA,IAAAA,EAAmB,K,w2BCY/B,IAAMC,EAAsB,IAAIC,EAAAA,EAC1BC,EAAa,UA+InB,EA7ImB,oBAAAC,K,4FAAAC,CAAA,KAAAD,GACfE,EAAA,sBAMAA,EAAA,qBAQAA,EAAA,gBAM2B,GAE3BA,EAAA,iBAI4B,IAE5BA,EAAA,kBAI6B,GAAE,C,UAyG9B,O,EAzG8BF,G,EAAA,EAAAG,IAAA,OAAAC,MAMxB,SAAKC,GACRC,KAAKC,OAASF,EAAQG,OACtBF,KAAKG,MAAQH,KAAKC,OAAOG,UAAUC,SAASZ,GAAcH,EAAoBgB,KAAOhB,EAAoBiB,MACzGP,KAAKQ,SAAUR,KAAKC,OAAOQ,QAAiB,SAAIC,QAAQC,KAAKC,MAAMZ,KAAKC,OAAOQ,QAAiB,UAC5FV,EAAQc,YACRb,KAAKa,UAAYd,EAAQc,WAEzBd,EAAQe,aACRd,KAAKc,WAAaf,EAAQe,YAG9Bd,KAAKe,cACLf,KAAKgB,aACT,GAAC,CAAAnB,IAAA,gBAAAC,MAEM,WACCmB,EAAAA,EAAAA,iBAAyBC,EAAAA,GAAAA,iBAA8C,SAAflB,KAAKG,QAI7DH,KAAKQ,SACLR,KAAKmB,eAETnB,KAAKG,MAAQb,EAAoBiB,MACjCP,KAAKoB,cACT,GAEA,CAAAvB,IAAA,cAAAC,MAIQ,WAAW,IAAAuB,EAAA,KACf9B,EAAS+B,UAAU,kBAAkB,WACjCD,EAAKlB,MAAQb,EAAoBiB,MACjCc,EAAKpB,OAAOG,UAAUmB,OAAO9B,EACjC,GACJ,GAEA,CAAAI,IAAA,cAAAC,MAIQ,WACJE,KAAKC,OAAOuB,iBAAiB,QAASxB,KAAKyB,WAAWC,KAAK1B,MAC/D,GAEA,CAAAH,IAAA,aAAAC,MAIQ,WACAE,KAAKQ,SACLR,KAAKmB,eAGTnB,KAAK2B,cACT,GAEA,CAAA9B,IAAA,eAAAC,MAKQ,WACAE,KAAKG,QAAUb,EAAoBgB,MACnCN,KAAKG,MAAQb,EAAoBiB,MACjCP,KAAKoB,gBAELpB,KAAKG,MAAQb,EAAoBgB,KACjCN,KAAK4B,aAEb,GAEA,CAAA/B,IAAA,eAAAC,MAIQ,WACJE,KAAKC,OAAOG,UAAUyB,OAAOpC,EACjC,GAEA,CAAAI,IAAA,aAAAC,MAIQ,WACAE,KAAKa,WACLtB,EAASuC,QAAQ9B,KAAKa,UAAWb,KAEzC,GAEA,CAAAH,IAAA,cAAAC,MAIQ,WACAE,KAAKc,YACLvB,EAASuC,QAAQ9B,KAAKc,WAAYd,KAE1C,M,8EAACN,CAAA,CA1Ic,E","sources":["webpack://multi-kelnik-2.0/./frontend/src/components/button-trigger/types.ts","webpack://multi-kelnik-2.0/./frontend/src/components/button-trigger/index.ts"],"sourcesContent":["export enum EButtonTriggerState {\r\n    OPEN = 'open',\r\n    CLOSE = 'close',\r\n}\r\n\r\nexport interface IButtonTriggerOptions {\r\n    target: HTMLElement;\r\n    eventOpen?: string;\r\n    eventClose?: string;\r\n}\r\n\r\nexport interface IButtonTrigger {\r\n    init(options: IButtonTriggerOptions): void;\r\n    closeByResize(): void;\r\n}\r\n","/**\r\n * @version 2.0\r\n * @author Kelnik Studios {http://kelnik.ru}\r\n * @link https://kelnik.gitbooks.io/kelnik-documentation/content/front-end/components/menu-trigger.html documentation\r\n */\r\nimport type {IButtonTrigger, IButtonTriggerOptions} from './types';\r\nimport {EBreakpoint} from '@/common/scripts/constants';\r\nimport {EButtonTriggerState} from './types';\r\nimport type {IObserver} from '@/common/scripts/types/observer';\r\nimport Observer from '@/common/scripts/observer';\r\nimport {Utils} from '@/common/scripts/utils';\r\n\r\nconst observer: IObserver = new Observer();\r\nconst CLASS_OPEN = 'is-open';\r\n\r\nclass ButtonTrigger implements IButtonTrigger {\r\n    /**\r\n     * Элемент, по которому кликают\r\n     * @type {HTMLElement}\r\n     */\r\n    private button: HTMLElement;\r\n\r\n    /**\r\n     * Состояния кнопки\r\n     * open - открывает\r\n     * close - закрывает\r\n     * @type {string}\r\n     */\r\n    private state: EButtonTriggerState;\r\n\r\n    /**\r\n     * Динамичность кнопки\r\n     * Если динамичная, то состояние меняется при клике\r\n     * если не динамичное, то состояние вообще не меняется\r\n     * @type {boolean}\r\n     */\r\n    private dynamic: boolean = true;\r\n\r\n    /**\r\n     * Строка со значением события для медиатора для состояния закрытия\r\n     * @type {string}\r\n     */\r\n    private eventOpen: string = '';\r\n\r\n    /**\r\n     * Строка со значением события для медиатора для состояния открытия\r\n     * @type {string}\r\n     */\r\n    private eventClose: string = '';\r\n\r\n    /**\r\n     * Инициализирует компонент\r\n     * @param {Object} options - объект настроек\r\n     */\r\n    public init(options: IButtonTriggerOptions): void {\r\n        this.button = options.target;\r\n        this.state = this.button.classList.contains(CLASS_OPEN) ? EButtonTriggerState.OPEN : EButtonTriggerState.CLOSE;\r\n        this.dynamic = this.button.dataset['dynamic'] ? Boolean(JSON.parse(this.button.dataset['dynamic'])) : true;\r\n        if (options.eventOpen) {\r\n            this.eventOpen = options.eventOpen;\r\n        }\r\n        if (options.eventClose) {\r\n            this.eventClose = options.eventClose;\r\n        }\r\n\r\n        this._subscribes();\r\n        this._bindEvents();\r\n    }\r\n\r\n    public closeByResize(): void {\r\n        if (Utils.getWindowWidth() < EBreakpoint.TABLET_PORTRAIT || this.state !== 'open') {\r\n            return;\r\n        }\r\n\r\n        if (this.dynamic) {\r\n            this._toggleClass();\r\n        }\r\n        this.state = EButtonTriggerState.CLOSE;\r\n        this._stateClose();\r\n    }\r\n\r\n    /**\r\n     * Метод содержит в себе колбэки на события других модулей.\r\n     * @private\r\n     */\r\n    private _subscribes(): void {\r\n        observer.subscribe('scrollBy:start', () => {\r\n            this.state = EButtonTriggerState.CLOSE;\r\n            this.button.classList.remove(CLASS_OPEN);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Навешивает слушателей на элементы\r\n     * @private\r\n     */\r\n    private _bindEvents(): void {\r\n        this.button.addEventListener('click', this._clickBind.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Обрабатывает клик\r\n     * @private\r\n     */\r\n    private _clickBind(): void {\r\n        if (this.dynamic) {\r\n            this._toggleClass();\r\n        }\r\n\r\n        this._changeState();\r\n    }\r\n\r\n    /**\r\n     * Изменяет состояние\r\n     * с отрытого на закрытое и наоборот\r\n     * @private\r\n     */\r\n    private _changeState(): void {\r\n        if (this.state === EButtonTriggerState.OPEN) {\r\n            this.state = EButtonTriggerState.CLOSE;\r\n            this._stateClose();\r\n        } else {\r\n            this.state = EButtonTriggerState.OPEN;\r\n            this._stateOpen();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Изменяет классы на элементе с открытого на закрытое и открытое\r\n     * @private\r\n     */\r\n    private _toggleClass(): void {\r\n        this.button.classList.toggle(CLASS_OPEN);\r\n    }\r\n\r\n    /**\r\n     * Сообщает, что компонент открыт\r\n     * @private\r\n     */\r\n    private _stateOpen(): void {\r\n        if (this.eventOpen) {\r\n            observer.publish(this.eventOpen, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Сообщает, что компонент закрыт\r\n     * @private\r\n     */\r\n    private _stateClose(): void {\r\n        if (this.eventClose) {\r\n            observer.publish(this.eventClose, this);\r\n        }\r\n    }\r\n}\r\n\r\nexport default ButtonTrigger;\r\n"],"names":["EButtonTriggerState","observer","Observer","CLASS_OPEN","ButtonTrigger","_classCallCheck","_defineProperty","key","value","options","this","button","target","state","classList","contains","OPEN","CLOSE","dynamic","dataset","Boolean","JSON","parse","eventOpen","eventClose","_subscribes","_bindEvents","Utils","EBreakpoint","_toggleClass","_stateClose","_this","subscribe","remove","addEventListener","_clickBind","bind","_changeState","_stateOpen","toggle","publish"],"sourceRoot":""}