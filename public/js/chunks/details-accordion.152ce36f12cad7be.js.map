{"version":3,"file":"js/chunks/details-accordion.152ce36f12cad7be.js","mappings":"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","sources":["webpack://multi-kelnik-2.0/./frontend/src/components/details/index.ts"],"sourcesContent":["import type {IDetailsAccordion} from './types';\r\nimport type {IObserver} from '@/common/scripts/types/observer';\r\nimport Observer from '@/common/scripts/observer';\r\nimport {Utils} from '@/common/scripts/utils';\r\n\r\nconst observer: IObserver = new Observer();\r\n\r\nclass DetailsAccordion implements IDetailsAccordion {\r\n    // The <details> element\r\n    private element: HTMLDetailsElement;\r\n    // The <summary> element\r\n    private summary: HTMLElement | null;\r\n    // The content element\r\n    private content: HTMLElement | null;\r\n    // The animation object (so we can cancel it if needed)\r\n    private animation: Animation | null;\r\n    // if the element is closing\r\n    private isClosing: boolean = false;\r\n    // Store if the element is expanding\r\n    private isExpanding: boolean = false;\r\n    private desktopOpen: boolean;\r\n\r\n    public init(element: HTMLDetailsElement): void {\r\n        this._setOptions(element);\r\n        this._bindEvents();\r\n\r\n        // Set the open attribute based on the parameter\r\n        this.element.dataset['open'] = `${this.element.hasAttribute('open')}`;\r\n    }\r\n\r\n    private _setOptions(element: HTMLDetailsElement): void {\r\n        this.element = element;\r\n        this.summary = this.element.querySelector('summary');\r\n        this.content = this.element.querySelector('.j-details__content');\r\n        this.desktopOpen = this.element.dataset['desktopOpen'] ?\r\n            Boolean(JSON.parse(this.element.dataset['desktopOpen'])) :\r\n            false;\r\n    }\r\n\r\n    private _bindEvents(): void {\r\n        if (this.summary) {\r\n            this.summary.addEventListener('click', this._onClick.bind(this));\r\n        }\r\n\r\n        if (this.desktopOpen) {\r\n            // Раскрываем при ините все списки\r\n            this._onResize();\r\n\r\n            const events = ['resize', 'orientationchange'];\r\n\r\n            events.forEach((event: string) => {\r\n                window.addEventListener(event, this._onResize.bind(this));\r\n            });\r\n        }\r\n    }\r\n\r\n    private _onClick(event: MouseEvent): void {\r\n        event.preventDefault();\r\n        this.element.style.overflow = 'hidden';\r\n        // Если есть параметр раскрытия на десктопе и устройство больше мобильного, то не обрабатываем клик на раскрытие\r\n        if (this.desktopOpen && !Utils.isMobile()) {\r\n            return;\r\n        }\r\n\r\n        if (this.isClosing || !this.element.open) {\r\n            // Check if the element is being closed or is already closed\r\n            this._open();\r\n            // Set the open attribute based on the parameter\r\n            this.element.dataset['open'] = 'true';\r\n        } else if (this.isExpanding || this.element.open) {\r\n            // Check if the element is being opened or is already open\r\n            this._shrink();\r\n            // Set the open attribute based on the parameter\r\n            this.element.dataset['open'] = 'false';\r\n        }\r\n    }\r\n\r\n    private _open(): void {\r\n        // Apply a fixed height on the element\r\n        this.element.style.height = `${this.element.offsetHeight}px`;\r\n        // Force the [open] attribute on the details element\r\n        this.element.open = true;\r\n        // Wait for the next frame to call the expand function\r\n        window.requestAnimationFrame(this._expand.bind(this));\r\n    }\r\n\r\n    private _shrink(): void {\r\n        // Set the element as \"being closed\"\r\n        this.isClosing = true;\r\n\r\n        // Store the current height of the element\r\n        const startHeight = `${this.element.offsetHeight}px`;\r\n        // Calculate the height of the summary\r\n        const endHeight = this.summary ? `${this.summary.offsetHeight}px` : '0';\r\n\r\n        // If there is already an animation running\r\n        if (this.animation) {\r\n            // Cancel the current animation\r\n            this.animation.cancel();\r\n        }\r\n\r\n        // Start a WAAPI animation\r\n        this.animation = this.element.animate({\r\n            // Set the keyframes from the startHeight to endHeight\r\n            height: [startHeight, endHeight]\r\n        }, {\r\n            duration: 300,\r\n            easing  : 'ease-out'\r\n        });\r\n\r\n        // When the animation is complete, call onAnimationFinish()\r\n        this.animation.onfinish = () => {\r\n            this._onAnimationFinish(false);\r\n        };\r\n\r\n        // If the animation is cancelled, isClosing variable is set to false\r\n        this.animation.oncancel = () => {\r\n            this.isClosing = false;\r\n        };\r\n    }\r\n\r\n    private _expand(): void {\r\n        // Set the element as \"being expanding\"\r\n        this.isExpanding = true;\r\n        // Get the current fixed height of the element\r\n        const startHeight = `${this.element.offsetHeight}px`;\r\n        // Calculate the open height of the element (summary height + content height)\r\n        const endHeight = `${this.summary!.offsetHeight + this.content!.offsetHeight}px`;\r\n\r\n        // If there is already an animation running\r\n        if (this.animation) {\r\n            // Cancel the current animation\r\n            this.animation.cancel();\r\n        }\r\n\r\n        // Start a WAAPI animation\r\n        this.animation = this.element.animate({\r\n            // Set the keyframes from the startHeight to endHeight\r\n            height: [startHeight, endHeight]\r\n        }, {\r\n            duration: 300,\r\n            easing  : 'ease-out'\r\n        });\r\n\r\n        // When the animation is complete, call onAnimationFinish()\r\n        this.animation.onfinish = () => {\r\n            this._onAnimationFinish(true);\r\n        };\r\n\r\n        // If the animation is cancelled, isExpanding variable is set to false\r\n        this.animation.oncancel = () => {\r\n            this.isExpanding = false;\r\n        };\r\n    }\r\n\r\n    private _onAnimationFinish(open: boolean): void {\r\n        // Set the open attribute based on the parameter\r\n        this.element.open = open;\r\n        // Clear the stored animation\r\n        this.animation = null;\r\n        // Reset isClosing & isExpanding\r\n        this.isClosing = false;\r\n        this.isExpanding = false;\r\n        // Remove the overflow hidden and the fixed height\r\n        this.element.style.height = '';\r\n        this.element.style.overflow = '';\r\n        observer.publish(`details:${open ? 'open' : 'close'}`);\r\n    }\r\n\r\n    private _onResize(): void {\r\n        if (Utils.isMobile()) {\r\n            // Check if the element is being opened or is already open\r\n            this._shrink();\r\n            // Set the open attribute based on the parameter\r\n            this.element.dataset['open'] = 'false';\r\n        } else if (this.isClosing || !this.element.open) {\r\n            // Check if the element is being closed or is already closed\r\n            this._open();\r\n            // Set the open attribute based on the parameter\r\n            this.element.dataset['open'] = 'true';\r\n        }\r\n    }\r\n}\r\n\r\nexport default DetailsAccordion;\r\n"],"names":["observer","Observer","DetailsAccordion","_classCallCheck","_defineProperty","key","value","element","this","_setOptions","_bindEvents","dataset","concat","hasAttribute","summary","querySelector","content","desktopOpen","Boolean","JSON","parse","_this","addEventListener","_onClick","bind","_onResize","forEach","event","window","preventDefault","style","overflow","Utils","isClosing","open","_open","isExpanding","_shrink","height","offsetHeight","requestAnimationFrame","_expand","_this2","startHeight","endHeight","animation","cancel","animate","duration","easing","onfinish","_onAnimationFinish","oncancel","_this3","publish"],"sourceRoot":""}