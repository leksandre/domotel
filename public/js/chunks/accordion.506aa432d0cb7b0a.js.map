{"version":3,"file":"js/chunks/accordion.506aa432d0cb7b0a.js","mappings":"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","sources":["webpack://multi-kelnik-2.0/./frontend/src/components/accordion/types.ts","webpack://multi-kelnik-2.0/./frontend/src/components/accordion/index.ts","webpack://multi-kelnik-2.0/./frontend/src/components/scrollAnimation/index.ts"],"sourcesContent":["export enum EAccordionState {\r\n    OPEN = 'open',\r\n    CLOSE = 'close',\r\n}\r\n\r\nexport interface IAccordionOptions {\r\n    element: Element;\r\n    isCloseTimeout: boolean;\r\n    selectors: IAccordionSelectors;\r\n}\r\n\r\nexport interface IAccordionSelectors {\r\n    toggler: string;\r\n    content: string;\r\n    contentOuter: string;\r\n    title: string;\r\n    blockElement?: string;\r\n}\r\n\r\nexport interface IAbAccordion {\r\n    init(options: IAccordionOptions): void;\r\n    reinit(): void;\r\n    open(): void;\r\n    close(): void;\r\n}\r\n","import type {IAbAccordion, IAccordionOptions} from './types';\r\nimport {EAccordionState} from './types';\r\nimport type {IObserver} from '@/common/scripts/types/observer';\r\nimport Observer from '@/common/scripts/observer';\r\nimport ScrollAnimation from '../scrollAnimation';\r\nimport {Utils} from '@/common/scripts/utils';\r\n\r\nconst observer: IObserver = new Observer();\r\nconst CLASS_OPEN = 'is-open';\r\nconst HEIGHT_CLOSE = 0;\r\n\r\nabstract class AbstractAccordion implements IAbAccordion {\r\n    protected options: IAccordionOptions;\r\n\r\n    /**\r\n     * Состояние компонента\r\n     * open - открыто\r\n     * close - закрыто\r\n     * @type {string}\r\n     */\r\n    protected isOpen: EAccordionState = EAccordionState.CLOSE;\r\n\r\n    /**\r\n     * Высота схлопываемого контента\r\n     * зависит от содержимого\r\n     * @type {number}\r\n     */\r\n    protected height: number;\r\n\r\n    /**\r\n     * Целевой элемент\r\n     * @type {HTMLElement}\r\n     */\r\n    private element: Element;\r\n\r\n    /**\r\n     * Флаг задержки скрытия контентной части\r\n     * @type {boolean}\r\n     */\r\n    private isCloseTimeout: boolean = false;\r\n\r\n    /**\r\n     * Элемент-переключатель\r\n     * @type {Element|null}\r\n     */\r\n    private toggler: Element | null | undefined = null;\r\n\r\n    /**\r\n     * Элемент-содержимое\r\n     * Используем его высоту\r\n     * @type {Element|null}\r\n     */\r\n    private content: HTMLElement | undefined;\r\n\r\n    /**\r\n     * Элемент-обертка содержимого\r\n     * Его высоту меняем\r\n     * @type {Element|null}\r\n     */\r\n    private contentOuter: HTMLElement | null | undefined = null;\r\n\r\n    /**\r\n     * Элемент заголовка\r\n     * @type {Element|null}\r\n     */\r\n    private title: HTMLElement;\r\n\r\n    /**\r\n     * Текст заголовка для переключения между состояниями (заголовок/скрыть)\r\n     * @type {string}\r\n     */\r\n    private titleText: string = '';\r\n\r\n    /**\r\n     * Текст \"скрыть\"\r\n     * @type {string}\r\n     */\r\n    private hiddenText: string = 'Скрыть';\r\n\r\n    /**\r\n     * Флаг, менять ли заголовок между (заголовок/скрыть)\r\n     * @type {boolean}\r\n     */\r\n    private isChangeTitle: boolean = false;\r\n\r\n    /**\r\n     * Значение задержки перед скрытием контентной части\r\n     * @type {number}\r\n     */\r\n    private timeout: number = 300;\r\n\r\n    private blockElement: Element;\r\n\r\n    constructor() {\r\n        // Привязываем контекст\r\n        this.close = this.close.bind(this);\r\n        this.open = this.open.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Инициализирует модуль\r\n     * @param {Object} options - параметры\r\n     */\r\n    public init(options: IAccordionOptions): void {\r\n        this._setElements(options);\r\n        this._setInitState();\r\n        this._subscribe();\r\n        this._bindEvents();\r\n    }\r\n\r\n    /**\r\n     * Переинициирует начальное состояние\r\n     */\r\n    public reinit(): void {\r\n        this._setInitState();\r\n    }\r\n\r\n    /**\r\n     * Открывает контент\r\n     */\r\n    public open(): void {\r\n        if (this.isChangeTitle && this.titleText) {\r\n            Utils.clearHtml(this.title);\r\n            Utils.insetContent(this.title, this.hiddenText);\r\n        }\r\n\r\n        this.element.classList.add(CLASS_OPEN);\r\n        this.isOpen = EAccordionState.OPEN;\r\n        this._setContentHeight(this.height);\r\n        setTimeout(() => {\r\n            observer.publish('accordion:open');\r\n        }, this.timeout);\r\n    }\r\n\r\n    /**\r\n     * Закрывает контент\r\n     */\r\n    public close(): void {\r\n        if (this.isChangeTitle && this.titleText) {\r\n            Utils.clearHtml(this.title);\r\n            Utils.insetContent(this.title, this.titleText);\r\n        }\r\n\r\n        if (this.blockElement) {\r\n            this._scrollToElement();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.element.classList.remove(CLASS_OPEN);\r\n            this.isOpen = EAccordionState.CLOSE;\r\n            this._setContentHeight(HEIGHT_CLOSE);\r\n            observer.publish('accordion:close');\r\n        }, this.isCloseTimeout ? this.timeout : 0);\r\n    }\r\n\r\n    /**\r\n     * Ставит начальное состояние\r\n     * @private\r\n     */\r\n    protected _setInitState(): void {\r\n        this.height = this._getHeight();\r\n        this.isOpen = this.element.classList.contains(CLASS_OPEN) ? EAccordionState.OPEN : EAccordionState.CLOSE;\r\n        this.titleText = this.title ? (this.element as HTMLElement).dataset['initialTitle'] || '' : '';\r\n        this.isChangeTitle = Boolean((this.element as HTMLElement).dataset['changeTitle']);\r\n        this.hiddenText = (this.element as HTMLElement).dataset['alternateTitle'] || this.hiddenText;\r\n\r\n        if (this.title) {\r\n            this.title.innerHTML = this.titleText;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Установка высоты элементу-обертке\r\n     * @param {number} height - высота\r\n     * @private\r\n     */\r\n    protected _setContentHeight(height: number): void {\r\n        if (!this.contentOuter) {\r\n            throw new Error(`Необходимо указать элемент 'contentOuter': ${this.options.selectors.contentOuter}`);\r\n        }\r\n\r\n        this.contentOuter.style.height = height ? `${height}px` : `${height}`;\r\n    }\r\n\r\n    /**\r\n     * Подписывается на события других модулей\r\n     * ATTENTION! Абстрактный метод\r\n     * @private\r\n     */\r\n    protected _subscribe(): void {\r\n        throw new Error('Метод _subscribe должен быть переопределен');\r\n    }\r\n\r\n    /**\r\n     * Определяет элементы из параметров\r\n     * @param {Object} options - параметры\r\n     * @private\r\n     */\r\n    private _setElements(options: IAccordionOptions): void {\r\n        this.options = options;\r\n        const {selectors}: IAccordionOptions = this.options;\r\n\r\n        this.element = options.element;\r\n        this.isCloseTimeout = options.isCloseTimeout;\r\n        this.toggler = options.element.querySelector(selectors.toggler);\r\n        this.content = options.element.querySelector(selectors.content) as HTMLElement;\r\n        this.contentOuter = options.element.querySelector(selectors.contentOuter) as HTMLElement;\r\n        this.title = options.element.querySelector(selectors.title) as HTMLElement;\r\n        if (selectors.blockElement) {\r\n            this.blockElement = options.element.closest(selectors.blockElement) as HTMLElement;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Возвращает высоту контента\r\n     * @returns {number} - высота контента\r\n     * @private\r\n     */\r\n    private _getHeight(): number {\r\n        if (!this.content) {\r\n            throw new Error(`Необходимо указать элемент 'content': ${this.options.selectors.content}`);\r\n        }\r\n\r\n        return this.content.offsetHeight;\r\n    }\r\n\r\n    /**\r\n     * Навешивает обработчики событий\r\n     * @private\r\n     */\r\n    private _bindEvents(): void {\r\n        if (this.toggler) {\r\n            this.toggler.addEventListener('click', this._onTogglerClick.bind(this));\r\n        }\r\n\r\n        const events = ['resize', 'orientationchange'];\r\n\r\n        events.forEach((event: string) => {\r\n            window.addEventListener(event, this._onResize.bind(this));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Событие, которое происходит при нажатии на переключатель\r\n     * @private\r\n     */\r\n    private _onTogglerClick(): void {\r\n        const method = this.isOpen === EAccordionState.OPEN ? this.close : this.open;\r\n\r\n        this.height = this._getHeight();\r\n\r\n        method();\r\n    }\r\n\r\n    /**\r\n     * Событие, которое происходит при изменении размера/ориентации окна\r\n     * @private\r\n     */\r\n    private _onResize(): void {\r\n        if (this.isOpen) {\r\n            this._update();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Обновляет высоту\r\n     */\r\n    private _update(): void {\r\n        this.height = this._getHeight();\r\n        this._setContentHeight(this.isOpen === EAccordionState.OPEN ? this.height : HEIGHT_CLOSE);\r\n    }\r\n\r\n    /**\r\n     * Скролл к началу блока\r\n     */\r\n    private _scrollToElement(): void {\r\n        if (!this.blockElement) {\r\n            return;\r\n        }\r\n\r\n        const targetY =\r\n            this.blockElement.getBoundingClientRect().top + pageYOffset -\r\n            ((this.blockElement as HTMLElement).offsetTop * 2);\r\n\r\n        const scrollAnimation = new ScrollAnimation({\r\n            targetY\r\n        });\r\n\r\n        scrollAnimation.scroll();\r\n    }\r\n}\r\n\r\nexport default class Accordion extends AbstractAccordion {\r\n    /**\r\n     * Подписывается на события других модулей\r\n     * @private\r\n     */\r\n    override _subscribe(): void {\r\n        observer.subscribe('closeAccordion', this.close);\r\n        observer.subscribe('openAccordion', this.open);\r\n    }\r\n\r\n    /**\r\n     * Ставит начальное состояние\r\n     * @private\r\n     */\r\n    override _setInitState(): void {\r\n        super._setInitState();\r\n        this._setContentHeight(this.isOpen === EAccordionState.OPEN ? this.height : HEIGHT_CLOSE);\r\n    }\r\n}\r\n","import type {IScrollAnimation, IScrollAnimationOptions} from './types';\r\n\r\nclass scrollAnimation implements IScrollAnimation {\r\n    private readonly targetY: number;\r\n    private readonly duration: number;\r\n    private start: number;\r\n    private readonly startY: number;\r\n    private animationName: number;\r\n\r\n    constructor(options: IScrollAnimationOptions) {\r\n        this.targetY = options.targetY ?? 0;\r\n        this.duration = options.duration || 600;\r\n        this.start = 0;\r\n        this.startY = window.pageYOffset;\r\n    }\r\n\r\n    public scroll(targetCoord?: number | undefined, offset: number = 0): void {\r\n        const targetY = targetCoord || this.targetY;\r\n        const diff = targetY - this.startY - offset;\r\n\r\n        const step = (timestamp: number): void => {\r\n            if (!this.start) {\r\n                this.start = timestamp;\r\n            }\r\n\r\n            const time = timestamp - this.start;\r\n            const percent = Math.min(time / this.duration, 1);\r\n\r\n            window.scrollTo(0, this.startY + (diff * percent));\r\n\r\n            if (time < this.duration) {\r\n                this.animationName = window.requestAnimationFrame(step.bind(this));\r\n            }\r\n        };\r\n\r\n        this.animationName = window.requestAnimationFrame(step.bind(this));\r\n    }\r\n}\r\n\r\nexport default scrollAnimation;\r\n"],"names":["EAccordionState","observer","Observer","CLASS_OPEN","Accordion","_AbstractAccordion","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","subscribe","this","close","open","_get","_getPrototypeOf","prototype","call","_setContentHeight","isOpen","OPEN","height","AbstractAccordion","_defineProperty","CLOSE","bind","options","_setElements","_setInitState","_subscribe","_bindEvents","isChangeTitle","titleText","Utils","title","hiddenText","element","classList","add","setTimeout","publish","timeout","_this","blockElement","_scrollToElement","remove","isCloseTimeout","_getHeight","contains","dataset","Boolean","innerHTML","contentOuter","Error","concat","selectors","style","toggler","querySelector","content","closest","offsetHeight","_this2","addEventListener","_onTogglerClick","forEach","event","window","_onResize","method","_update","targetY","getBoundingClientRect","top","pageYOffset","offsetTop","ScrollAnimation","scroll","scrollAnimation","_options$targetY","duration","start","startY","targetCoord","offset","length","undefined","diff","animationName","requestAnimationFrame","step","timestamp","time","percent","Math","min","scrollTo"],"sourceRoot":""}